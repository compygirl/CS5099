language ESSENCE' 1.0

given num: int

such that
[ num**2 | num : int(1..3)]
$
$$ matrix solutionBoard[r][c]
$given r: int  $num of rows
$given c: int  $num of cols
$$given a: int  $leftMatrix[r][a]
$given b: int  $topMatrix[b][c]
$
$given topMatrix: matrix indexed by [int(1..b), int(1..c)] of int(0..r)
$$given f: cd matrix indexed by [int(1..b), int(1..c)] of int(0..r)
$
$find solutionBoard: matrix indexed by [int(1..r), int(1..c)] of int(0..1)
$$find M : matrix indexed by [int(1..)]
$$find f: matrix indexed by [int(1..b), int(1..c)] of int(0..r)
$$find k: int(0..r)
$$find starSol: matrix indexed by [int(1..r), int(1..c)] of int(1..r)
$
$such that
$forAll row:int(1..b).
$  forAll col:int(1..c).
$    ((sum j: int(1..b).topMatrix[j,col])=0)->((sum i: int(1..r).solutionBoard[i,col])=0),
$
$
$$if r==2 and values is just 1<r, then is should chack that they are equal
$forAll row:int(1..b).
$	forAll col:int(1..c).
$		((sum j: int(1..b).topMatrix[j,col])=(sum i: int(1..r).solutionBoard[i,col])),
$
$
$forAll row:int(1..b).
$	forAll col:int(1..c).
$		((sum j: int(1..b).topMatrix[j,col])=r)->((sum i: int(1..r).solutionBoard[i,col])=r),
$
$
$$copying everything from topMatrix to f matrix:
$$forAll row:int(1..b).
$$	forAll col:int(1..c).
$$		(topMatrix[row, col]=1)->(f[row,col]=1),
$$
$$forAll row:int(1..b).
$$	forAll col:int(1..c).
$$		(topMatrix[row, col]=2)->(f[row,col]=2),
$$
$$forAll row:int(1..b).
$$	forAll col:int(1..c).
$$		(topMatrix[row, col]=0)->(f[row,col]=0)
$
$
$$fill the f[] with the right values
$$forAll row:int(1..b).
$$	forAll col:int(1..c).
$$		(topMatrix[row, col]>0)->(f[row.col]=solutionBoard),
$
$$MATRIX COMPREHENSION:
$$forAll row:int(1..b).
$$	forAll col:int(1..c).
$$    forAll run:int(0..topMatrix[row, col]).
$$      (topMatrix[row, col]>0)->(solutionBoard[f[row, col]+run,col]=1),
$[ topMatrix[row, col]**2 | row : int(1..b), col:int(1..c), topMatrix[row, col]>0] = [ 1,4,9,16,25 ; int(1..5) ]

$forAll row:int(1..b).
$	forAll col:int(1..c).
$    forAll run:int(0..topMatrix[row, col]).
$      (topMatrix[row, col]=0)->(solutionBoard[f[row, col]+run,col]=0)
$		$((sum j: int(1..b).topMatrix[j,col])=r)->((sum i: int(1..r).solutionBoard[i,col])=r),
$


$ forcing zeros between
$forAll row:int(1..b).
$	forAll col:int(1..c).
$		(topMatrix[row, col]!=0)->((sum i: int(f[row,col]..(f[row,col]+topMatrix[row, col])).solutionBoard[i, col])=topMatrix[row, col])
