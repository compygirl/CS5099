language ESSENCE' 1.0

$ matrix solutionBoard[r][c]
given r: int  $num of rows
given c: int  $num of cols
$given a: int  $leftMatrix[r][a]
given b: int  $topMatrix[b][c]

given topMatrix: matrix indexed by [int(1..b), int(1..c)] of int(0..r)
given leftMatrix: matrix indexed by [int(1..r), int(1..b)] of int(0..c)

find f: matrix indexed by [int(1..b), int(1..c)] of int(0..r)
find f2: matrix indexed by [int(1..r), int(1..b)] of int(0..c)

find solutionBoard: matrix indexed by [int(1..r), int(1..c)] of int(0..1)
$find f: matrix indexed by [int(1..b), int(1..c)] of int(0..r)
$find k: int(0..r)
$find starSol: matrix indexed by [int(1..r), int(1..c)] of int(1..r)

such that
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$$ Block for basic solutionBoard
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

$forAll row:int(1..b).
$  forAll col:int(1..c).
$    ((sum j: int(1..b).topMatrix[j,col])=0)->((sum i: int(1..r).solutionBoard[i,col])=0),

$if r==2 and values is just 1<r, then is should chack that they are equal
$forAll row:int(1..b).

$$closed:
forAll col:int(1..c).
	((sum j: int(1..b).topMatrix[j,col])=(sum i: int(1..r).solutionBoard[i,col])),

forAll row:int(1..r).
	((sum j: int(1..b).leftMatrix[row,j])=(sum i: int(1..c).solutionBoard[row,i])),


$forAll row:int(1..b).
	$forAll col:int(1..c).
	$	((sum j: int(1..b).topMatrix[j,col])=r)->((sum i: int(1..r).solutionBoard[i,col])=r),

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$$ Block for filling f matrix
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

$forAll row:int(1..b).
$$closed:
forAll col:int(1..c).
	((sum j: int(1..b).topMatrix[j,col])=0)->((sum i: int(1..b).f[i,col])=0),

forAll row:int(1..r).
	((sum j: int(1..b).leftMatrix[row,j])=0)->((sum i: int(1..b).f2[row,i])=0),



$forAll row: int(1..r).
$	((sum j: int (1..b).leftMatrix[row, j])=0)->

$matrix comprehension:
$forAll row: int (1..b).
		$forAll col:int(1..c).
		$	((sum j: int(1..b).topMatrix[j,col])!=0)-> ([f[i,col]<f[i+1,col]|i:int(1..b-1)]),

$$closed:
forAll row: int (1..b).
		forAll col:int(1..c).
			f[row, col]!=0 /\ f[row+1,col]!=0 ->(f[row, col]<f[row+1, col]) /\ ((f[row+1, col]-f[row, col]-topMatrix[row, col])>=1) ,

forAll row: int (1..b).
		forAll col:int(1..c).
			topMatrix[row, col]=0 -> f[row, col]=0,

$forAll row: int (1..b).
$		forAll col:int(1..c).
$			topMatrix[row, col]!=0 -> f[row, col]!=0,

$forAll row: int (1..b).
$		forAll col:int(1..c).
$			((sum j: int(1..b).topMatrix[j,col])!=0 /\ f[row, col]!=0)->(f[row, col]<f[row+1,col]),
$

$copying everything from topMatrix to f matrix:
$forAll row:int(1..b).
$	forAll col:int(1..c).
$		(topMatrix[row, col]=1)->(f[row,col]=1),
$
$forAll row:int(1..b).
$	forAll col:int(1..c).
$		(topMatrix[row, col]=2)->(f[row,col]=2),
$
$forAll row:int(1..b).
$	forAll col:int(1..c).
$		(topMatrix[row, col]=0)->(f[row,col]=0)

forAll row: int (1..r).
		forAll col:int(1..b).
			(f2[row, col]!=0 /\ f2[row,col+1]!=0) ->(f2[row, col]<f2[row, col+1]) /\ ((f2[row, col+1]-f2[row, col]-leftMatrix[row, col])>=1) ,

forAll row: int (1..r).
		forAll col:int(1..b).
			leftMatrix[row, col]=0 -> f2[row, col]=0,

$forAll row: int (1..r).
$		forAll col:int(1..b).
$			leftMatrix[row, col]!=0 -> f2[row, col]!=0,



$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$$ Block for making sequential lines on the solutionBoard:
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

$-------------------------------------------------------------------------
$ 1. Checking with zero, but the column is not empty: (and it is not needed?)
$-------------------------------------------------------------------------
$forAll row:int(1..b).
$	forAll col:int(1..c).
$    ((topMatrix[row, col]=0) /\ ((sum j: int(1..b).topMatrix[j,col])!=0))->
$			$forAll run:int(f[row, col]+topMatrix[row,col]..r).
$      	(solutionBoard[f[row-1, col]+topMatrix[row, col], col]=0),


$-------------------------------------------------------------------------
$ 2. This part gives WARNINGS for zero values
$-------------------------------------------------------------------------
$$closed:
forAll row:int(1..b).
	forAll col:int(1..c).
    (topMatrix[row, col]>0) -> forAll run:int(0..topMatrix[row,col]).
      (run > 0 -> (solutionBoard[f[row, col]+run-1,col]=1)),

forAll row:int(1..r).
	forAll col:int(1..b).
    (leftMatrix[row, col]>0) -> forAll run:int(0..leftMatrix[row,col]).
      (run > 0 -> (solutionBoard[row,f2[row, col]+run-1]=1))


$-------------------------------------------------------------------------
$ 2.1. Using Exist
$-------------------------------------------------------------------------
$forAll row:int(1..b).
$	forAll col:int(1..c).
$    (topMatrix[row, col]>0),
$		exists run:int(1..topMatrix[row,col]).
$      (solutionBoard[f[row, col]+run-1,col]=1),

$-------------------------------------------------------------------------
$ 3. Rewritten previous version, but will not work because of the decision variable
$ in the quntifier domain.
$-------------------------------------------------------------------------
$forAll row:int(1..b).
$	forAll col:int(1..c).
$    (topMatrix[row, col]!=0) -> (( sum i: int(f[row,col]..(f[row,col]+topMatrix[row,col]-1)).solutionBoard[i, col])=1),


$-------------------------------------------------------------------------
$ 4. Matrix comprehension:
$-------------------------------------------------------------------------
$forAll row:int(1..b).
$	forAll col:int(1..c).
$    (topMatrix[row, col]>0)-> [solutionBoard[f[row, col]+run-1,col] | run:int(1..topMatrix[row, col])]=1,

$-------------------------------------------------------------------------
$ 5. Working but not clear why?
$-------------------------------------------------------------------------
$forAll row:int(1..b).
$	forAll col:int(1..c).
$    (0>1)-> forAll run:int(1..topMatrix[row,col]).
$      (solutionBoard[f[row, col]+run-1,col]=1),

$$closed:
$forAll row:int(1..b).
$	forAll col:int(1..c).
$    (topMatrix[row, col]=1)->(solutionBoard[f[row, col],col]=1),
$
$forAll row:int(1..r).
$	forAll col:int(1..b).
$    (leftMatrix[row, col]=1)->(solutionBoard[f2[row, col],col]=1)

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$$ Block for forcing zero in between ones:
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$ forcing zeros between
$forAll row:int(1..b).
$	forAll col:int(1..c).
$		(topMatrix[row, col]!=0)->(solutionBoard[f[row,col]+topMatrix[row,col], col]=0)

			$(sum i: int(f[row,col]..(f[row,col]+topMatrix[row, col]-1)).solutionBoard[i, col])=1)

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$$ Block for finding the second matrix
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
