language ESSENCE' 1.0

$ matrix solutionBoard[r][c]
given r: int  $num of rows
given c: int  $num of cols
$given a: int  $leftMatrix[r][a]
given b: int  $topMatrix[b][c]

given topMatrix: matrix indexed by [int(1..b), int(1..c)] of int(0..r)

find solutionBoard: matrix indexed by [int(1..r), int(1..c)] of int(0..1)

such that
forAll row:int(1..b).
  forAll col:int(1..c).
    ((sum j: int(1..b).topMatrix[j,col])=0)->((sum i: int(1..r).solutionBoard[i,col])=0),



$check the way to reduce the implementation (cause constant values):
$forAll row:int(1..b).
$	forAll col:int(1..c).
$		(topMatrix[row,col]=1)->((sum i: int(1..r).solutionBoard[i,col])=1),
$
$forAll row:int(1..b).
$	forAll col:int(1..c).
$		(topMatrix[row,col]=2)->((sum i: int(1..r).solutionBoard[i,col])=2),
$
$$ this is ok:
$forAll row:int(1..b).
$  forAll col:int(1..c).
$    (topMatrix[row,col]=0)->((sum i: int(1..r).solutionBoard[i,col])=0)
$
$forAll row:int(1..b).
$	forAll col:int(1..c).
$		(topMatrix[row, col]=0)->(f[row,col]=0)


$if r==2 and values is just 1<r, then is should chack that they are equal
forAll row:int(1..b).
	forAll col:int(1..c).
		((sum j: int(1..b).topMatrix[j,col])=(sum i: int(1..r).solutionBoard[i,col])),


forAll row:int(1..b).
	forAll col:int(1..c).
		((sum j: int(1..b).topMatrix[j,col])=r)->((sum i: int(1..r).solutionBoard[i,col])=r)
