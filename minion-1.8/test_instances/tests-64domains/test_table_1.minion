MINION 1
#TEST CHECKONESOL 100000000000000 100000000000001 100000000000008 100000000000009 100000000000002 100000000000003
#
# Derived from ... 
# Minion Graceful Graph Instance
#   Version with alldiff from -Q to Q
# K3 x P2
#
# Minion Constraint Solver Input
#    http://sourceforge.net/projects/minion
# Instance created using CLisp generator written by Ian Gent
# Instance created at 14:06 on 12 Apr 2006
0
0
0
15
100000000000000 100000000000009 15
0
[x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14]
[a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]
0
1
[[x0,x1,x2,x3,x4,x5]
]
0
objective none
print m0
alldiff([x5,x4,x3,x2,x1,x0]
)

negativetable([x0,x3,x6]
,{<100000000000000,100000000000001,100000000000001>
,<100000000000000,100000000000002,100000000000002>
,<100000000000000,100000000000003,100000000000003>
,<100000000000000,100000000000004,100000000000004>
,<100000000000000,100000000000005,100000000000005>
,<100000000000000,100000000000006,100000000000006>
,<100000000000000,100000000000007,100000000000007>
,<100000000000000,100000000000008,100000000000008>
,<100000000000000,100000000000009,100000000000009>
,<100000000000001,100000000000000,100000000000001>
,<100000000000001,100000000000002,100000000000001>
,<100000000000001,100000000000003,100000000000002>
,<100000000000001,100000000000004,100000000000003>
,<100000000000001,100000000000005,100000000000004>
,<100000000000001,100000000000006,100000000000005>
,<100000000000001,100000000000007,100000000000006>
,<100000000000001,100000000000008,100000000000007>
,<100000000000001,100000000000009,100000000000008>
,<100000000000002,100000000000000,100000000000002>
,<100000000000002,100000000000001,100000000000001>
,<100000000000002,100000000000003,100000000000001>
,<100000000000002,100000000000004,100000000000002>
,<100000000000002,100000000000005,100000000000003>
,<100000000000002,100000000000006,100000000000004>
,<100000000000002,100000000000007,100000000000005>
,<100000000000002,100000000000008,100000000000006>
,<100000000000002,100000000000009,100000000000007>
,<100000000000003,100000000000000,100000000000003>
,<100000000000003,100000000000001,100000000000002>
,<100000000000003,100000000000002,100000000000001>
,<100000000000003,100000000000004,100000000000001>
,<100000000000003,100000000000005,100000000000002>
,<100000000000003,100000000000006,100000000000003>
,<100000000000003,100000000000007,100000000000004>
,<100000000000003,100000000000008,100000000000005>
,<100000000000003,100000000000009,100000000000006>
,<100000000000004,100000000000000,100000000000004>
,<100000000000004,100000000000001,100000000000003>
,<100000000000004,100000000000002,100000000000002>
,<100000000000004,100000000000003,100000000000001>
,<100000000000004,100000000000005,100000000000001>
,<100000000000004,100000000000006,100000000000002>
,<100000000000004,100000000000007,100000000000003>
,<100000000000004,100000000000008,100000000000004>
,<100000000000004,100000000000009,100000000000005>
,<100000000000005,100000000000000,100000000000005>
,<100000000000005,100000000000001,100000000000004>
,<100000000000005,100000000000002,100000000000003>
,<100000000000005,100000000000003,100000000000002>
,<100000000000005,100000000000004,100000000000001>
,<100000000000005,100000000000006,100000000000001>
,<100000000000005,100000000000007,100000000000002>
,<100000000000005,100000000000008,100000000000003>
,<100000000000005,100000000000009,100000000000004>
,<100000000000006,100000000000000,100000000000006>
,<100000000000006,100000000000001,100000000000005>
,<100000000000006,100000000000002,100000000000004>
,<100000000000006,100000000000003,100000000000003>
,<100000000000006,100000000000004,100000000000002>
,<100000000000006,100000000000005,100000000000001>
,<100000000000006,100000000000007,100000000000001>
,<100000000000006,100000000000008,100000000000002>
,<100000000000006,100000000000009,100000000000003>
,<100000000000007,100000000000000,100000000000007>
,<100000000000007,100000000000001,100000000000006>
,<100000000000007,100000000000002,100000000000005>
,<100000000000007,100000000000003,100000000000004>
,<100000000000007,100000000000004,100000000000003>
,<100000000000007,100000000000005,100000000000002>
,<100000000000007,100000000000006,100000000000001>
,<100000000000007,100000000000008,100000000000001>
,<100000000000007,100000000000009,100000000000002>
,<100000000000008,100000000000000,100000000000008>
,<100000000000008,100000000000001,100000000000007>
,<100000000000008,100000000000002,100000000000006>
,<100000000000008,100000000000003,100000000000005>
,<100000000000008,100000000000004,100000000000004>
,<100000000000008,100000000000005,100000000000003>
,<100000000000008,100000000000006,100000000000002>
,<100000000000008,100000000000007,100000000000001>
,<100000000000008,100000000000009,100000000000001>
,<100000000000009,100000000000000,100000000000009>
,<100000000000009,100000000000001,100000000000008>
,<100000000000009,100000000000002,100000000000007>
,<100000000000009,100000000000003,100000000000006>
,<100000000000009,100000000000004,100000000000005>
,<100000000000009,100000000000005,100000000000004>
,<100000000000009,100000000000006,100000000000003>
,<100000000000009,100000000000007,100000000000002>
,<100000000000009,100000000000008,100000000000001>
}
)

alldiff([x14,x13,x12,x11,x10,x9,x8,x7,x6]
)

eq(x0,100000000000000)

occurrence([x1,x2,x3]
,100000000000009,1)

occurrence([x1,x2,x3]
,100000000000008,1)

ineq(x0,x1,-1)

ineq(x1,x2,-1)

